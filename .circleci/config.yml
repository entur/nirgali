# For help and tutorials, visit https://circleci.com/docs/
# For internal documentation visit https://enturas.atlassian.net/wiki/spaces/ESP/pages/580026490/CircleCI
version: 2.1

orbs:
#  slack: circleci/slack@1.0.0
  node: circleci/node@5.0.2
  firebase-deploy: noyo/firebase-deploy@0.1.1

references:
  workspace_root: &workspace_root
    ~/project
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  build:
    executor:
      name: node/default
      tag: '14.19'
    steps:
      - *attach_workspace
      - checkout
      - node/install-packages
      - node/install-packages:
          app-dir: functions
      - run:
          name: "Run tests"
          command: npm run test
      - run:
          name: "Run functions tests"
          command: "npm run test:functions"
      - run:
          name: "Create production build"
          command: npm run build
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .
  deploy-dev:
    executor:
      name: node/default
      tag: '14.19'
    steps:
      - *attach_workspace
      - run:
          name: "Prepare app config"
          command: cp config/config-dev.json build/config.json
      - firebase-deploy/deploy:
          token: $FIREBASE_TOKEN_DEV
          project: dev
  deploy-staging:
    executor:
      name: node/default
      tag: '14.19'
    steps:
      - *attach_workspace
      - run:
          name: "Prepare app config"
          command: cp config/config-staging.json build/config.json
      - firebase-deploy/deploy:
          token: $FIREBASE_TOKEN_STAGING
          project: staging
  deploy-prod:
    executor:
      name: node/default
      tag: '14.19'
    steps:
      - *attach_workspace
      - run:
          name: "Prepare app config"
          command: cp config/config-prod.json build/config.json
      - firebase-deploy/deploy:
          token: $FIREBASE_TOKEN_PROD
          project: prod

workflows:
  "Build Pipeline":
    jobs:
      - build
      - deploy-dev:
          context: global
          filters:
            branches:
              only: master
          requires:
            - build
      - approve-deploy-staging:
          type: approval
          requires:
            - deploy-dev
      - deploy-staging:
          context: global
          filters:
            branches:
              only: master
          requires:
            - approve-deploy-staging
      - approve-deploy-prod:
          type: approval
          requires:
            - deploy-staging
      - deploy-prod:
          context: global
          filters:
            branches:
              only: master
          requires:
            - approve-deploy-prod
